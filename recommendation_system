
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

videogames_cleaned = videogames.drop(columns=['Rank', 'NA_Sales', 'JP_Sales', 'Other_Sales'])
videogames_cleaned.replace([np.inf, -np.inf], np.nan, inplace=True)
videogames_cleaned.dropna(inplace=True)
videogames_cleaned = videogames_cleaned.astype({"Publisher": str, "Year": int})

videogames_cleaned['Platform'] = videogames_cleaned['Platform'].map(lambda x: x.lower())
videogames_cleaned['Genre'] = videogames_cleaned['Genre'].map(lambda x: x.lower())
videogames_cleaned['Publisher'] = videogames_cleaned['Publisher'].map(lambda x: x.lower())

videogames_cleaned['Title'] = ""
videogames_cleaned = videogames_cleaned.astype({"Title": str})

for index, row in videogames_cleaned.iterrows():
  name = row['Name']
  tokenizer = nltk.RegexpTokenizer(r"\w+")
  title_tokens = tokenizer.tokenize(name)
  new_title = " ".join(title_tokens).lower()
  videogames_cleaned.at[index, 'Title'] = new_title

videogames_cleaned.set_index('Name', inplace=True)

videogames_cleaned['bag_of_words']=''
columns = videogames_cleaned.columns
for index, row in videogames_cleaned.iterrows():
  words=''
  for col in columns:
    if col=='Platform' or col=='Genre' or col == 'Publisher' or col=='Title':
      words = words + row[col] + ' '

  videogames_cleaned.at[index, 'bag_of_words'] = words

videogames_cleaned.drop(columns=[col for col in videogames_cleaned.columns if col!='bag_of_words'], inplace= True)

count = CountVectorizer()
count_matrix = count.fit_transform(videogames_cleaned['bag_of_words'])

indices = pd.Series(videogames_cleaned.index)
indices[:5]
#count_matrix

cosine_sim = cosine_similarity(count_matrix, count_matrix)
cosine_sim

cosine_sim.shape

def recommendations(title, cosine_sim = cosine_sim):
  recommended_videogames = []

  idx = indices[indices == title].index[0]

  score_series = pd.Series(cosine_sim[idx]).sort_values(ascending= False)

  top_20_indexes = list(score_series.iloc[1:21].index)

  for i in top_20_indexes:
    recommended_videogames.append(list(videogames_cleaned.index)[i])

  return recommended_videogames

recommendations('Fallout 4')
